// ===================================task-01===================================================
// Напиши функцію-конструктор Account, яка створює об'єкт з властивостями login і email.
// В prototype функції-конструктора добав метод getInfo(),
// який виводить в консоль значення полів login і email об'єкта який його викликав.

// ==============================task -02===================================

// // Напиши клас User для створення користувача
// //  з наступними властивостями:
// // name - рядок
// // age - число
// // followers - число
// // Добав метод getInfo(), який, виводить
// // рядок: User ${ім'я} is ${вік} years old and has ${кількість фоловерів} followers

// ================================task-03========================================
// // Напиши клас Storage, який буде створювати об'єкти для управління складом товарів.
// // При виклику буде отримувати один аргумент - початковий масив товарів,
// // і записувати його у властивість items.

// // Додай методи класу:

// // getItems() - повертає масив поточних товарів
// // addItem(item) - отримує новий товар і додає його до поточних
// // removeItem(item) - отримує товар і, якщо він є, видаляє його з поточних
// ================================task-04===============================================
// // Напиши клас StringBuilder.
// // На вхід він отримує один параметр - рядок, який записує у властивість _value.

// // Додай класу наступний функціонал:

// // Геттер value - повертає поточне значення поля _value
// // Метод append(str) - отримує параметр str (рядок) і додає його в кінець _value
// // Метод prepend(str) - отримує параметр str (рядок) і додає його на початок _value
// // Метод pad(str) - отримує параметр str (рядок) і додає його на початок і в кінець _value

// class StringBuilder {
//   constructor(someString) {
//     this._value = someString;
//   }
//   get value() {
//     return this._value;
//   }
//   append(str) {
//     this._value += str;
//   }
//   prepend(str) {
//     this._value = str + this._value;
//     this._value = str + this._value + str;
//   }
// }

// const builder = new StringBuilder(".");

// builder.append("^");
// console.log(builder.value); // '.^'

// builder.prepend("^");
// console.log(builder.value); // '^.^'

// builder.pad("=");
// console.log(builder.value); // '=^.^='

// ==================================task-05===================================
// // Напиши клас Car із зазначеними властивостями і методами.

//   /*
//    * Додай статичний метод `getSpecs(car)`,
//    * який приймає об'єкт-машину як параметр і виводить
//    * в консоль значення властивостей maxSpeed, speed, isOn, distance и price.
//    */

//   /*
//    * Конструктор отримує об'єкт налаштувань.
//    *
//    * Додай властивості майбутнього екземпляра класу:
//    *  speed - поточна швидкість, початкова 0
//    *  price - ціна автомобіля
//    *  maxSpeed - максимальна швидкість
//    *  isOn - заведений автомобіль, значення true або false. Спочатку false
//    *  distance - загальний кілометраж, спочатку 0
//    */

//   /*
//    * Додай геттер і сеттер для властивості price,
//    * який буде працювати з властивістю ціни автомобіля.
//    */

//   /*
//    * Додай код для того, щоб завести автомобіль
//    * Записує у властивість isOn значення true
//    */

//   /*
//    * Додай код для того, щоб заглушити автомобіль
//    * Записує у властивість isOn значення false,
//    * і скидає поточну швидкість в 0
//    */

//   /*
//    * Додає до властивості speed отримане значення,
//    * за умови, що результуюча швидкість
//    * не більше, ніж значення властивості maxSpeed
//    */

//   /*
//    * Забирає від властивості speed отримане значення,
//    * за умови, що результуюча швидкість не менше нуля
//    */

//   /*
//    * Додає в поле distance кілометраж (hours * speed),
//    * але тільки в тому випадку, якщо машина заведена!
//    */
